# -*- coding: utf-8 -*-
"""MSDS458_Assignment_03_20210110_v12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ny-cUjg7P1Wcw1NqSjxbVVbGoL36rVQo

# **Appendix**

<img src="https://github.com/djp840/MSDS_458_Public/blob/master/images/NorthwesternHeader.png?raw=1">

## MSDS458 Research Assignment 3

### Analyze AG_NEWS_SUBSET Data <br>

AG is a collection of more than 1 million news articles. News articles have been gathered from more than 2000 news sources by ComeToMyHead in more than 1 year of activity. ComeToMyHead is an academic news search engine which has been running since July, 2004. The dataset is provided by the academic comunity for research purposes in data mining (clustering, classification, etc), information retrieval (ranking, search, etc), xml, data compression, data streaming, and any other non-commercial activity.<br> 

For more information, please refer to the link http://www.di.unipi.it/~gulli/AG_corpus_of_news_articles.html<br> 


The AG's news topic classification dataset is constructed by choosing 4 largest classes (**World**, **Sports**, **Business**, and **Sci/Tech**) from the original corpus. Each class contains 30,000 training samples and 1,900 testing samples. The total number of training samples is 120,000 and testing 7,600.<br>

Homepage: https://arxiv.org/abs/1509.01626<br>

Source code: tfds.text.AGNewsSubset

Versions:

1.0.0 (default): No release notes.
Download size: 11.24 MiB

Dataset size: 35.79 MiB

<div class="alert alert-block alert-success">
    <b>More Technical</b>: Throughout the notebook. This types of boxes provide more technical details and extra references about what you are seeing. They contain helpful tips, but you can safely skip them the first time you run through the code.
</div>

## Import packages
"""

import datetime
from packaging import version
from collections import Counter
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# TensorFlow and tf.keras
import tensorflow as tf
from tensorflow import keras
import tensorflow_datasets as tfds

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
np.set_printoptions(precision=3, suppress=True)

"""### Create a Helper Function to Plot Graphs:"""

def plot_graphs(history, metric):
  plt.plot(history.history[metric])
  plt.plot(history.history['val_'+metric], '')
  plt.xlabel("Epochs")
  plt.ylabel(metric)
  plt.legend([metric, 'val_'+metric])

"""### Verify TensorFlow Version and Keras Version"""

print("This notebook requires TensorFlow 2.0 or above")
print("TensorFlow version: ", tf.__version__)
assert version.parse(tf.__version__).release[0] >=2

print("Keras version: ", keras.__version__)

"""<div class="alert alert-block alert-info">
    <b>Suppress warning messages</b></div>
"""

def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

"""### Mount Google Drive to Colab Environment"""

from google.colab import drive
drive.mount('/content/gdrive')

"""###  TensorFlow Datasets Information<br>
<div class="alert alert-block alert-info">
    <b> ag_news_subset</b><br>
    See https://www.tensorflow.org/datasets/catalog/ag_news_subset
    </div>

Get all the words in the documents (as well as the number of words in each document) by using the encoder to get the indices associated with each token and then translating the indices to tokens. But first we need to get the "unpadded" new articles so that we can get their length.
"""

#register  ag_news_subset so that tfds.load doesn't generate a checksum (mismatch) error
!python -m tensorflow_datasets.scripts.download_and_prepare --register_checksums --datasets=ag_news_subset

# https://www.tensorflow.org/datasets/splits
# The full `train` and `test` splits, interleaved together.
ri = tfds.core.ReadInstruction('train') + tfds.core.ReadInstruction('test')
dataset_all, info = tfds.load('ag_news_subset', with_info=True,  split=ri, as_supervised=True)

"""###  Exploratory Analysis AG News Subset

**Get information about the ag_news_subset dataset. We combined the training and test data for a total of 127,600 news articles.**
"""

info

tfds.as_dataframe(dataset_all.take(10),info)

"""### Review Labels (Categories) """

print(f'There are {info.features["label"].num_classes} classes in the dataset.')
print(f'The class names are {info.features["label"].names}')

# classes dictionary
categories =dict(enumerate(info.features["label"].names))
categories

"""The 127,600 news articles are evenly distributed among the 4 categories"""

train_categories = [categories[label] for label in dataset_all.map(lambda text, label: label).as_numpy_iterator()]
Counter(train_categories).most_common()

"""We will use the tf.keras.layers.experimental.preprocessing.TextVectorization layer to transform each news article into a "list" of non-negative integers representing the tokens in the news article.

For the purpose of training our models each such "encoding" will have a fixed length corresponding to the news article(s) with the most tokens. Shorter articles will be right-padded with zeros in the encoding. Also to speed up the training process, we will set max_tokens = 1000 so that words not in the vabulary set of top 1000 most common tokes are encoded as 1. But first we set max_tokens = None (which is the default value) in order to get the vocabulary size of the corpus.

"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=None)
# encoder.adapt(dataset_all.map(lambda text, label: text))
# vocab = np.array(encoder.get_vocabulary())
# 
#

print(f"There are {len(vocab)} vocabulary words in the corpus.")

"""There are 95976 vocabulary words in the corpus.

The .adapt method sets the layer's vocabulary. Here are the first 20 tokens. After the padding and unknown tokens they're sorted by frequency:
"""

vocab[:20]

"""Let's use how the encoding works on a sample string all of whose words are in the vocabulary of the corpus"""

example = "the dog ran after a red ball as it rolled by the hat on the ground."
for word in example.split():
  print(f'"{word}" is {"*not* " if word not in vocab  else ""}in the vocabulary.')

encoder(example)

"""Let us get the total number of words in the corpus and the sizes of the news articles"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# doc_sizes = []
# corpus = []
# for example, _ in dataset_all.as_numpy_iterator():
#   enc_example = encoder(example)
#   doc_sizes.append(len(enc_example))
#   corpus+=list(enc_example.numpy())

print(f"There are {len(corpus)} words in the corpus of {len(doc_sizes)} news articles.")
print(f"Each news article has between {min(doc_sizes)} and {max(doc_sizes)} tokens in it.")

plt.figure(figsize=(15,9))
plt.hist(doc_sizes, bins=20,range = (0,120))
plt.xlabel("Tokens Per Document")
plt.ylabel("Number of AG News Articles")

"""Encode the news articles using the top 1000 most common words in the corpus"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# encoder_1000 = tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=1000)
# encoder_1000.adapt(dataset_all.map(lambda text, label: text))
# vocab_1000 = np.array(encoder_1000.get_vocabulary())

"""The .adapt method sets the layer's vocabulary. Here are the first 20 tokens. After the padding and unknown tokens they're sorted by frequency:"""

vocab_1000[:20]

"""In particular, 0 is use for padding, 1 for the unknown words, 2 for the common word, i.e. 'the', etc. Let us look at the same example we encoded previously using the encoder for all the vocabulary words. Note that there are now five 1's denoting words that are not in the top 1000 in frequency.

We encode the same example as before using the new encoder. Note that there are now 5 out of vocabulary words.
"""

example = "the dog ran after a red ball as it rolled by the hat on the ground."
encoder_1000(example)

for word in example.split():
  print(f'"{word}" is {"*not* " if word not in vocab_1000  else ""}in the vocabulary.')

"""We want to determine the number of non-vocabulary words in each news articles (denoted by 1s in the encoding)"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# doc1000_sizes = []
# corpus1000 = []
# count1000=0
# useless = 0
# # stop = 0
# percents = []
# for example, _ in dataset_all.as_numpy_iterator():
#   # stop+=1
#   # if stop > 5: break
#   enc_example = encoder_1000(example)
#   num_ones = tf.math.count_nonzero(enc_example==1).numpy()
#   percent_ones = round(num_ones*100/len(enc_example))
#   # print(f"{percent_ones}%")
#   percents.append(percent_ones)
# 
#   s = set(list(enc_example.numpy()))
#   if s == {1}: useless+=1
# 
#   doc1000_sizes.append(len(enc_example))
#   corpus1000+=list(enc_example.numpy())
# 
#   count1000 += tf.math.count_nonzero(enc_example>1)

print(f"There are {len(corpus1000)} words in the corpus of {len(doc1000_sizes)} news articles.")
print(f"Each news article has between {min(doc1000_sizes)} and {max(doc1000_sizes)} tokens in it.")

"""

Note below that most of the news articles consists of at least 60% (top 1000) vocabulary words (with only 22 out for 127,600 news articles containing no top 1000 vacabulary words)"""

Counter(percents).most_common(10)
np.unique(percents, return_counts=True)

plt.figure(figsize=(15,9))
plt.hist(percents, 20)
plt.ylabel('Number of Documents')
plt.xlabel('Percent of Non-Vocabulary Words in a Document');

print(f"There are {len(corpus1000)} words in the corpus with {useless} documents not containing any of the top {len(vocab_1000)} vocabulary words.")
print(f"There are {count1000} top {len(vocab_1000)} vocabulary words in the corpus.")

"""### Preprocessing Data Create Input Pipeline"""

# register  ag_news_subset so that tfds.load doesn't generate a checksum (mismatch) error
!python -m tensorflow_datasets.scripts.download_and_prepare --register_checksums --datasets=ag_news_subset

# Example Approaches to Split Data Set
# dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:]','test[:1000]', 'test[1000:]'],
dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:95%]','train[95%:]', 'test[:]'],
# dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:114000]','train[114000:]', 'test[:]'],
                          as_supervised=True)
train_dataset, validation_dataset, test_dataset = dataset
# train_dataset, test_dataset = dataset['train'],dataset['test']

####  Dataset Splits (Training, Test, Validation)
#### .8934 Training, .0470 Test, .0596 Validation

len(train_dataset),len(validation_dataset),len(test_dataset) 
# len(train_dataset),len(test_dataset)

"""### Review Distribution of Categorical Labels for the 114000 training data (news articles)"""

from collections import Counter
train_categories = [categories[label] for label in train_dataset.map(lambda text, label: label).as_numpy_iterator()]
Counter(train_categories).most_common()

"""Review Example with Interger Label Encoded Classification(text, label pairs):"""

for example, label in train_dataset.take(1):
  print('text: ', example.numpy())
  print('class: ', categories[label.numpy()])

"""#### Preprocessing Shuffle Data for Training and Create Batches of `(text, label)` pairs:"""

BUFFER_SIZE = 10000
BATCH_SIZE = 64

train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)
validation_dataset = validation_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)
test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)

for example, label in train_dataset.take(2):
  print('texts: ', example.numpy()[:3])
  print()
  print('labels: ', label.numpy()[:3])

for example, label in train_dataset.take(2):
  print('texts: ', example.numpy()[:3])
  print()
  print('labels: ', [categories[n] for n in label.numpy()[:3]])
  print()

"""## Create the Text Encoder

The raw text loaded by `tfds` needs to be processed before it can be used in a model. The simplest way to process text for training is using the `experimental.preprocessing.TextVectorization` layer. This layer has many capabilities, but this tutorial sticks to the default behavior.

Create the layer, and pass the dataset's text to the layer's `.adapt` method:

The `.adapt` method sets the layer's vocabulary. Here are the first 20 tokens. After the padding and unknown tokens they're sorted by frequency:
"""

VOCAB_SIZE=1000
encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(
    max_tokens=VOCAB_SIZE)
encoder.adapt(train_dataset.map(lambda text, label: text))

vocab = np.array(encoder.get_vocabulary())
len(vocab)

vocab = np.array(encoder.get_vocabulary())
vocab[:20]

"""Here are the 20 least frequent words."""

vocab[-20:]

"""Once the vocabulary is set, the layer can encode text into indices. The tensors of indices are 0-padded to the longest sequence in the batch (unless you set a fixed `output_sequence_length`):"""

encoded_example = encoder(example)[:3].numpy()
encoded_example

"""With the default settings, the process is not completely reversible. There are three main reasons for that:

1. The default value for `preprocessing.TextVectorization`'s `standardize` argument is `"lower_and_strip_punctuation"`.
2. The limited vocabulary size and lack of character-based fallback results in some unknown tokens.
"""

for n in range(3):
  print("Original: ", example[n].numpy())
  print("Round-trip: ", " ".join(vocab[encoded_example[n]]))
  print()

"""## Create the model

![A drawing of the information flow in the model](https://github.com/tensorflow/docs/blob/master/site/en/tutorials/text/images/bidirectional.png?raw=1)

Above is a diagram of the model. 

1. This model can be build as a `tf.keras.Sequential`.

1. The first layer is the `encoder`, which converts the text to a sequence of token indices.

2. After the encoder is an embedding layer. An embedding layer stores one vector per word. When called, it converts the sequences of word indices to sequences of vectors. These vectors are trainable. After training (on enough data), words with similar meanings often have similar vectors.

  This index-lookup is much more efficient than the equivalent operation of passing a one-hot encoded vector through a `tf.keras.layers.Dense` layer.

3. A recurrent neural network (RNN) processes sequence input by iterating through the elements. RNNs pass the outputs from one timestep to their input on the next timestep.

  The `tf.keras.layers.Bidirectional` wrapper can also be used with an RNN layer. This propagates the input forward and backwards through the RNN layer and then concatenates the final output. 

  * The main advantage to a bidirectional RNN is that the signal from the beginning of the input doesn't need to be processed all the way through every timestep to affect the output.  

  * The main disadvantage of a bidirectional RNN is that you can't efficiently stream predictions as words are being added to the end.

1. After the RNN has converted the sequence to a single vector the two `layers.Dense` do some final processing, and convert from this vector representation to a single logit as the classification output.

<div class="alert alert-block alert-info">
    <b>tf.keras.layers.Bidirectional</b><br>
    https://www.tensorflow.org/api_docs/python/tf/keras/layers/Bidirectional
    </div>

<img src="https://github.com/djp840/MSDS_458_Public/blob/master/images/BidirectionalRNN.png?raw=1">

# Experiment 1
"""

num_classes = 4
model = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(input_dim=len(encoder.get_vocabulary())
                              ,output_dim=32
                                # Use masking to handle the variable sequence lengths
                              ,mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32))
                              ,tf.keras.layers.Dense(32, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # num_classes = 4
])

"""<div class="alert alert-block alert-success"> 
Please note that we choose to Keras sequential model here since all the layers in the model only have single input and produce single output. </div>

<div class="alert alert-block alert-info"> 
<b>tf.keras.Model</b><br>
https://www.tensorflow.org/api_docs/python/tf/keras/Model
</div>

## Compile Model

<div class="alert alert-block alert-info">
<b>tf.keras.losses.SparseCategoricalCrossentropy</b><br>
https://www.tensorflow.org/api_docs/python/tf/keras/losses/SparseCategoricalCrossentropy</div>
"""

model.compile(optimizer=tf.keras.optimizers.Adam(1e-4)
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we don not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

"""Please note that Keras sequential model is used here since all the layers in the model only have single input and produce single output. In case you want to use stateful RNN layer, you might want to build your model with Keras functional API or model subclassing so that you can retrieve and reuse the RNN layer states. Please check [Keras RNN guide](https://www.tensorflow.org/guide/keras/rnn#rnn_state_reuse) for more details.

The embedding layer [uses masking](../../guide/keras/masking_and_padding) to handle the varying sequence-lengths. All the layers after the `Embedding` support masking:
"""

print([layer.supports_masking for layer in model.layers])

"""## Train the model

<div class="alert alert-block alert-success">
    <b>Module: tf.keras.callbacks</b></div>

<div class="alert alert-block alert-info">
<b>tf.keras.callbacks.EarlyStopping</b><br>
https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping</div>

<div class="alert alert-block alert-info">
<b>tf.keras.callbacks.ModelCheckpoint</b><br>
https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint</div>
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history = model.fit(train_dataset
#                     ,epochs = 5
#                     ,validation_data=validation_dataset
#                     )

test_loss, test_acc = model.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""## Plotting Performance Metrics - Single Layer Bidirectional RNN

We use Matplotlib to create 2 plots--displaying the training and validation loss (resp. accuracy) for each (training) epoch side by side.
"""

history_dict = history.history
history_dict.keys()

history_df=pd.DataFrame(history_dict)
history_df.tail(10)

losses = history.history['loss']
accs = history.history['accuracy']
val_losses = history.history['val_loss']
val_accs = history.history['val_accuracy']
epochs = len(losses)

plt.figure(figsize=(16, 4))
for i, metrics in enumerate(zip([losses, accs], [val_losses, val_accs], ['Loss', 'Accuracy'])):
    plt.subplot(1, 2, i + 1)
    plt.plot(range(epochs), metrics[0], label='Training {}'.format(metrics[2]))
    plt.plot(range(epochs), metrics[1], label='Validation {}'.format(metrics[2]))
    plt.legend()
plt.show()

"""## Model Architecture Summary Single Layer Bidirectional RNN"""

model.summary()

keras.utils.plot_model(model, "BiDirectionalLSTM.png", show_shapes=True)

"""## Stack two or more LSTM layers

Keras recurrent layers have two available modes that are controlled by the `return_sequences` constructor argument:

* If `False` it returns only the last output for each input sequence (a 2D tensor of shape (batch_size, output_features)). This is the default, used in the previous model.

* If `True` the full sequences of successive outputs for each timestep is returned (a 3D tensor of shape `(batch_size, timesteps, output_features)`).

Here is what the flow of information looks like with `return_sequences=True`:

![layered_bidirectional]?raw=1"

The interesting thing about using an `RNN` with `return_sequences=True` is that the output still has 3-axes, like the input, so it can be passed to another RNN layer, like this:

<img src="https://github.com/djp840/MSDS_458_Public/blob/master/images/multilayerBidirectionalLSTM.png?raw=1">

# Experiment 2
"""

model2 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 32, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32))
                              ,tf.keras.layers.Dense(32, activation='relu')
                              ,tf.keras.layers.Dense(32, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

"""<div class="alert alert-block alert-info">
<b>tf.keras.losses.SparseCategoricalCrossentropy</b><br>
https://www.tensorflow.org/api_docs/python/tf/keras/losses/SparseCategoricalCrossentropy</div>
"""

model2.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history2 = model2.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model2.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""## Plotting Performance Metrics - Multi-Layer Bidirectional RNN

We use Matplotlib to create 2 plots--displaying the training and validation loss (resp. accuracy) for each (training) epoch side by side.
"""

history_dict2 = history2.history
history_dict2.keys()

history2_df=pd.DataFrame(history_dict2)
history2_df.tail()

losses = history2.history['loss']
accs = history2.history['accuracy']
val_losses = history2.history['val_loss']
val_accs = history2.history['val_accuracy']
epochs = len(losses)

plt.figure(figsize=(16, 4))
for i, metrics in enumerate(zip([losses, accs], [val_losses, val_accs], ['Loss', 'Accuracy'])):
    plt.subplot(1, 2, i + 1)
    plt.plot(range(epochs), metrics[0], label='Training {}'.format(metrics[2]))
    plt.plot(range(epochs), metrics[1], label='Validation {}'.format(metrics[2]))
    plt.legend()
plt.show()

"""#### Model Architecture Summary Single Layer Bidirectional RNN"""

model2.summary()

keras.utils.plot_model(model2, "2Layer_BiDirectionalLSTM.png", show_shapes=True)

"""Check out other existing recurrent layers such as [GRU layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GRU).

If you're interestied in building custom RNNs, see the [Keras RNN Guide](../../guide/keras/rnn.ipynb).

# Experiment 3
"""

model3 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 64, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64))
                              ,tf.keras.layers.Dense(64, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model3.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history3 = model3.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model3.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 4"""

model4 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 64, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64))
                              ,tf.keras.layers.Dense(64, activation='relu')
                              ,tf.keras.layers.Dense(64, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model4.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history4 = model4.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model4.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 5"""

model5 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 128, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128))
                              ,tf.keras.layers.Dense(128, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model5.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history5 = model5.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model5.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 6"""

model6 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 128, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128))
                              ,tf.keras.layers.Dense(128, activation='relu')
                              ,tf.keras.layers.Dense(128, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model6.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history6 = model6.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model6.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))



"""# Experiment 7"""

model7 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 256, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256))
                              ,tf.keras.layers.Dense(256, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model7.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history7 = model7.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model7.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))



"""# Experiment 8"""

model8 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 256, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(256))
                              ,tf.keras.layers.Dense(256, activation='relu')
                              ,tf.keras.layers.Dense(256, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model8.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history8 = model8.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model8.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 9"""

model9 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 512, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model9.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history9 = model9.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model9.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 10"""

model10 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 512, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model10.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history10 = model10.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model10.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 11"""

model11 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 256, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model11.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history11 = model11.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model11.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 12"""

model12 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model12.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history12 = model12.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model12.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

from sklearn.metrics import confusion_matrix
y_pred = model12.predict(test_dataset)
predicted_categories = tf.argmax(y_pred, axis=1)


true_categories = tf.concat([y for x, y in test_dataset], axis=0)

confusion_matrix(predicted_categories, true_categories)

from sklearn.metrics import precision_score
precision_score(true_categories, predicted_categories, average='micro')

from sklearn.metrics import recall_score
recall_score(true_categories, predicted_categories, average='micro')

"""# Experiment 13"""

model13 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dropout(0.5)
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model13.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history13 = model13.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model13.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 14"""

model14 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dropout(0.5)
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dropout(0.5)
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model14.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history14 = model14.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model14.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 15"""

from tensorflow.keras import regularizers
model15 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax', kernel_regularizer='l1')   # not binary since there are num_classes categories
])

model15.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history15 = model15.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model15.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 16"""

model16 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax', kernel_regularizer='l2')   # not binary since there are num_classes categories
])

model16.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history16 = model16.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model16.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 17"""

model17 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model17.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history17 = model17.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=2)]
#                     )

test_loss, test_acc = model17.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 18"""

encoder_none = tf.keras.layers.experimental.preprocessing.TextVectorization(
    max_tokens=None)
encoder_none.adapt(train_dataset.map(lambda text, label: text))
model18 = tf.keras.Sequential([
                              encoder_none
                              ,tf.keras.layers.Embedding(len(encoder_none.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model18.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history18 = model18.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model18.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 19"""

encoder_500 = tf.keras.layers.experimental.preprocessing.TextVectorization(
    max_tokens=500)
encoder_500.adapt(train_dataset.map(lambda text, label: text))
model19 = tf.keras.Sequential([
                              encoder_500
                              ,tf.keras.layers.Embedding(len(encoder_500.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model19.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history19 = model19.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model19.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 20"""

encoder_none = tf.keras.layers.experimental.preprocessing.TextVectorization(
    max_tokens=200)
encoder_none.adapt(train_dataset.map(lambda text, label: text))
model20 = tf.keras.Sequential([
                              encoder_none
                              ,tf.keras.layers.Embedding(len(encoder_none.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model20.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history20 = model20.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model20.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 21"""

encoder_none = tf.keras.layers.experimental.preprocessing.TextVectorization(
    max_tokens=1000, output_sequence_length=10)
encoder_none.adapt(train_dataset.map(lambda text, label: text))
model21 = tf.keras.Sequential([
                              encoder_none
                              ,tf.keras.layers.Embedding(len(encoder_none.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model21.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history21 = model21.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model21.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 22"""

from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from keras.layers import Embedding
from keras.models import Sequential
from keras.layers import GlobalMaxPooling1D
from keras.layers import Dense, Activation, Flatten

model22 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(input_dim = len(encoder.get_vocabulary()), output_dim = 64, mask_zero=True)
                              ,tf.keras.layers.Conv1D(32,7)
                              ,tf.keras.layers.MaxPooling1D(5)
                              ,tf.keras.layers.GlobalMaxPooling1D()
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')])

model22.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy()  # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history22 = model22.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model22.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))

"""# Experiment 23"""

model23 = tf.keras.Sequential([
                              encoder
                              ,tf.keras.layers.Embedding(len(encoder.get_vocabulary()), 1024, mask_zero=True)
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.SimpleRNN(512,  return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.SimpleRNN(512, return_sequences=True))
                              ,tf.keras.layers.Bidirectional(tf.keras.layers.SimpleRNN(512))
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(512, activation='relu')
                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # not binary since there are num_classes categories
])

model23.compile(optimizer='adam'
              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we do not have specify a softmax activation function in the last layer
              ,metrics=['accuracy'])

# Commented out IPython magic to ensure Python compatibility.
# %%time
# history23 = model23.fit(train_dataset
#                     ,epochs=5
#                     ,validation_data=validation_dataset
#                     ,validation_steps=30
#                     )

test_loss, test_acc = model23.evaluate(test_dataset)

print('Test Loss: {}'.format(test_loss))
print('Test Accuracy: {}'.format(test_acc))